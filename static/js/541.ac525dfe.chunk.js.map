{"version":3,"file":"static/js/541.ac525dfe.chunk.js","mappings":"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","sources":["FnF/Pages/Tasks/AddTask.jsx","FnF/Pages/Tasks/ListTask.jsx","FnF/Pages/Settings.jsx","FnF/Dashboard.jsx","FnF/FnF.jsx","FnF/Server.ts","FnF/components/Articles.jsx","FnF/components/Category.jsx"],"sourcesContent":["import CategoryList from \"../../components/Category\";\nimport ListIcon from '@mui/icons-material/List';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport Server from \"../../Server\";\nimport Footer from \"../../../Layout/Footer\";\n\nfunction AddTask() {\n    const categoryListRef = React.useRef([]);\n    const [countries, setCountries] = useState([]);\n    const [taskID, setTaskID] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [topicName, setTopicName] = useState('folklore');\n    const [country, setCountry] = useState('BD');\n    const [targetwiki, setTargetwiki] = useState('');\n    const [categoryExpanded, setCategoryExpanded] = useState(true);\n    const [categoryFetching, setCategoryFetching] = useState(false);\n    const [targetWikiError, setTargetWikiError] = useState(false);\n    const [defaultCategories, setDefaultCategories] = useState([]);\n    const [resultElement, setResultElement] = useState(null);\n    const statusRef = React.useRef(false);\n    const wiki = []\n    for (const [key, value] of Object.entries(Server.languages)) {\n        wiki.push({ id: key, label: value })\n    }\n    wiki.sort((a, b) => a.label.localeCompare(b.label));\n    useEffect(() => {\n        Server.fetchCountries(topicName).then(countries => {\n            setCountries([...countries]);\n        })\n    }, [topicName])\n    useEffect(() => {\n        if (!country)\n            return;\n        if (!topicName)\n            return;\n        setDisabled(true);\n        setCategoryFetching(true);\n        Server.getCategories({ country: country, topic: topicName })\n            .then(categories => {\n                setDisabled(false);\n                setDefaultCategories(categories)\n            }).finally(e => {\n                // console.log(e)\n                setDisabled(false);\n                setCategoryFetching(false);\n            })\n    }, [country, topicName]);\n    const submitTask = useCallback(() => {\n        // submit task logic\n        const categoryList = categoryListRef?.current;\n        if (!categoryList?.length)\n            return;\n        if(!targetwiki){\n            setTargetWikiError(true);\n            return;\n        } else {\n            setTargetWikiError(false);\n        }\n        if ( !country || !categoryList || !topicName)\n            return;\n        setDisabled(true);\n        setResultElement(null);\n        Server.submitTask({\n            target_wiki: targetwiki,\n            country: country,\n            categories: categoryList,\n            topic_id: topicName,\n            task_data: categoryList\n        }).then(response => {\n            const taskID = response?.id;\n            setTaskID(taskID);\n            // console.log(response)\n            setDisabled(false);\n            setCategoryExpanded(false);\n            setResultElement(<ArticleList\n                Server={Server}\n                taskID={taskID}\n                statusRef={statusRef}\n                setDisabled={setDisabled}\n                targetLanguage={targetwiki}\n            />)\n        })\n    }, [targetwiki]);\n    return (\n        <Card>\n            <CardHeader title=\"Add Task\" action={\n                <Button variant=\"contained\" color=\"success\" onClick={submitTask} disabled={disabled} size=\"small\">\n                    <ListIcon /> Generate\n                </Button>\n            } />\n            <CardContent>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'left',\n                    flexDirection: 'row',\n                    // borderSpacing: 1\n                }}>\n                    <FormControl sx={{ width: 300 }} size=\"small\">\n                        <InputLabel>Country</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            value={country}\n                            label=\"Country\"\n                            onChange={e => e.target.value && setCountry(e.target.value)}\n                        >\n                            {countries.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ width: 300, ml: 0.5 }} size=\"small\">\n                        <InputLabel>Target Wiki</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            error={targetWikiError}\n                            value={targetwiki}\n                            label=\"Target Wiki\"\n                            onChange={e => e.target.value && setTargetwiki(e.target.value)}\n                        >\n                            {wiki.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant=\"contained\"\n                        disabled={disabled}\n                        // color=\"secondary\"\n                        onClick={e => setCategoryExpanded(!categoryExpanded)}\n                        size=\"small\"\n                        sx={{\n                            padding : 1\n                        }}\n                        >\n                        {categoryExpanded ? <CollapseIcon /> : <ExpandedIcon />}\n                    </Button>\n                </Box>\n\n                <Collapse in={categoryExpanded}>\n                    {categoryFetching ? <CircularProgress /> : (\n                        <CategoryList\n                            disabled={disabled}\n                            categoryListRef={categoryListRef}\n                            Server={Server}\n                            initialCategories={defaultCategories}\n\n                        />\n                    )}\n                </Collapse>\n                {resultElement}\n\n            <Footer />\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default AddTask","\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CardActions, CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\nimport GREEN from \"@mui/material/colors/green\";\nimport RED from \"@mui/material/colors/red\";\nimport Yellow from \"@mui/material/colors/yellow\";\nimport Server from \"../../Server\"\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@mui/icons-material/Add';\nimport Footer from '../../../Layout/Footer';\nconst User = () => {\n    const [username, setUsername] = useState(null);\n    const [id, setID] = useState(0)\n    const [taskCount, setTaskCount] = useState(0)\n    const [articleCount, setArticleCount] = useState(0)\n    const [fetching, setFetching] = useState(false)\n    useEffect(() => {\n        setFetching(true)\n        Server.getMe().then(user => {\n            setUsername(user.username)\n            setTaskCount(user.task_count)\n            setID(user.id)\n            setArticleCount(user.article_count)\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return fetching ? <CircularProgress /> : (\n        <Box>\n            <h2>Welcome, {username}</h2>\n            <h3>Task Count : {taskCount}</h3>\n            <h3>Total Article Count : {articleCount}</h3>\n        </Box>\n    )\n}\n\nconst DownloadButon = ({ id }) => {\n    const download = async () => {\n        const csv = await Server.exportResult(id, 'csv')\n        const a = document.createElement('a')\n        a.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv' }))\n        a.download = 'result.csv'\n        a.click()\n    }\n    return <Button variant=\"contained\" color=\"primary\" onClick={download}>\n        <DownloadIcon />\n    </Button>\n}\nconst headers = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1 },\n    { field: 'status', headerName: 'Status',maxWidth: 100, flex : 1 },\n    // { field: 'topic_id', headerName: 'Topic',  flex : 1 },\n    { field: 'country', headerName: 'Country',  flex : 1 },\n    { field: 'targetwiki', headerName: 'Language', minWidth : 100, flex : 1},\n    { field: 'download', headerName: 'Download', renderCell : (params) => params.value},\n    { field: 'category_count', headerName: 'Category', maxWidth: 100, flex : 1 },\n    {field : 'article_count', headerName : 'Article', maxWidth : 100, flex : 1},\n]\nconst TaskList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [fetching, setFetching] = useState(false);\n    const formatter = new Intl.DateTimeFormat('en-US', {\n        dateStyle: 'medium',\n        timeStyle: 'medium'\n    });\n    useEffect(() => {\n        setFetching(true)\n        Server.getTasks().then(tasks => {\n            setTasks(tasks.map(v =>  ({\n                ...v,\n                country : Server.countries[v.country] || v.country,\n                // created_at : formatter.format(new Date(v.created_at)),\n                download : v.status == 'done' && <DownloadButon id={v.id} />,\n                targetwiki : Server.languages[v.target_wiki] || v.target_wiki,\n            })))\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return <DataGrid\n        rows={tasks}\n        columns={headers}\n        initialState={{\n            pagination: {\n                paginationModel : {\n                    pageSize: 10,\n                }\n            }\n        }}\n        sx={{\n            '& .MuiDataGrid-row' : {\n                cursor : 'pointer',\n                color : 'white',\n            },\n            '& .Mui-hovered' : {\n                color : 'black'\n            },\n            '& .Mui-selected' : {\n                color : 'black'\n            },\n            '& .task-done' : {\n                backgroundColor : GREEN[800],\n                color : 'white',\n            },\n            '& .task-done:hover' : {\n                backgroundColor : GREEN[600],\n                color : 'white',\n            },\n            '& .task-pending' : {\n                backgroundColor : Yellow[300],\n                color : 'black'\n            },\n            '& .task-failed' : {\n                backgroundColor : RED[300],\n            },\n        }}\n        rowsPerPageOptions={[5]}\n        checkboxSelection={false}\n        disableSelectionOnClick={true}\n        rowSelection={false}\n        getRowClassName={(params) => `task-${params.row.status} .task`}\n        loading={fetching}\n    />\n\n}\nconst ListTask = () => {\n    const NewTaskButton = () => (\n        <Link to=\"/fnf/task/create\">\n           <Button variant=\"contained\" color=\"success\"><AddIcon /> New List</Button>\n        </Link>\n    )\n    return (\n        <Card>\n            \n            <CardHeader action={<NewTaskButton />}/>\n            <CardContent>\n            <User />\n                <TaskList />\n                <Footer />\n            </CardContent>\n        </Card>\n    )\n}\nexport default ListTask","import SelectInput from \"@mui/material/Select/SelectInput\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport PowerSettingsNewIcon from '@mui/icons-material/PowerSettingsNew';\nimport HideIcon from '@mui/icons-material/VisibilityOff';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Collapse from \"@mui/material/Collapse\"\nimport Server from \"../Server.ts\";\nimport { useCallback, useState } from \"react\";\nimport Footer from \"../../Layout/Footer.jsx\";\nconst Settings = () => {\n    const [users, setUsers] = useState([])\n    const hideUsername = useCallback((e) => {\n        const message = `\n        Are you want to hide your username from all the records?\n        This action is irreversible and it would:\n        - Hide your username from all the records\n        - Keep your central ID intact\n        - log you out from now. You need to login again to continue\n        `\n        if (window.confirm(message))\n            Server.updateMe({ username: \"Hidden\" }).then(user => {\n                fetch('/user/logout', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({})\n                }).then(res => {\n                    window.location.href = '/'\n                })\n            })\n    }, []);\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n            {/* <Collapse in={true}>\n                <AutoComplete\n                options={users}\n                sx={{m : 1}}\n                renderInput={props => <TextField {...props} label=\"Username\" />}\n                />\n            </Collapse> */}\n\n            <Button variant=\"contained\" color=\"error\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                onClick={hideUsername}\n            >\n                <HideIcon /> &nbsp; Hide my username\n            </Button>\n\n            <Footer />\n        </Paper>\n    )\n}\nexport default Settings","import { Box, Button, Card, CardActions, CardContent, Paper, Typography } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport AddIcon from '@mui/icons-material/Add';\nimport ListIcon from '@mui/icons-material/List';\nimport SettingIcon from '@mui/icons-material/Settings';\nimport PeopleIcon from '@mui/icons-material/People';\nimport Footer from \"../Layout/Footer\";\nimport Server from \"./Server\";\nexport default function Description({ user }) {\n    const sections = [];\n    if(Server.hasAccess(user.rights, Server.RIGHTS.TASK))\n        sections.push(\n            <Box key=\"task\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>List Generation</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/task/create\"\n            >\n                <AddIcon /> &nbsp; Add Task\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/task\"\n            >\n                <ListIcon /> &nbsp; List Tasks\n            </Button>\n        </Box>\n        );\n    if(Server.hasAccess(user.rights, Server.RIGHTS.TOPIC))\n        sections.push(\n            <Box key=\"topic\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>Topic Management</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/topic/create\"\n            >\n                <AddIcon /> &nbsp; Create New Topic\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/topic\"\n            >\n                <ListIcon /> &nbsp; See All Topics\n            </Button>\n        </Box>\n        );\n    if(Server.hasAccess(user.rights, Server.RIGHTS.STATS))\n        sections.push(\n            <Box key=\"user\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>User Management</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/setting\"\n            >\n                <SettingIcon /> &nbsp; Settings\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/user\"\n            >\n                <PeopleIcon /> &nbsp; See All Users\n            </Button>\n        </Box>\n        );\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n            <Typography variant=\"title\" component=\"h2\" sx={{\n                textAlign: 'center',\n                m: 2\n            }}>\n                Welcome {user.username},<br/>\n            </Typography>\n            <Typography sx={{ mb: 1.5, textAlign: 'center' }} color=\"text.secondary\">\n            Introducing a powerful tool that identifies articles in the English Wikipedia that are absent from your native language Wikipedia.\n            You can customize your selection criteria, and our tool will provide you with a table displaying the missing articles along with suggested titles.\n            You also have the option to download the list in both CSV and wikitables formats.\n            Explore the gap and enhance your language's Wikipedia with ease.\n            </Typography>\n            <hr />\n            \n            {sections}\n            <Footer />\n        </Paper>\n    )\n}","import { Routes, Route } from \"react-router-dom\"\nimport React, { lazy } from \"react\"\nimport AddTask from \"./Pages/Tasks/AddTask.jsx\";\nimport ListTask from \"./Pages/Tasks/ListTask.jsx\"\nimport Setting from \"./Pages/Settings.jsx\";\nimport DashBoard from \"./Dashboard.jsx\";\nimport Server from \"./Server.ts\"\nconst AddTopic = lazy(() => import('./Pages/Topics/CreateTopic.jsx'))\nconst EditTopic = lazy(() => import('./Pages/Topics/EditTopic.jsx'))\nconst ListTopic = lazy(() => import('./Pages/Topics/ListTopics.jsx'))\n\nconst ListUser = lazy(() => import('./Pages/User/ListUser.jsx'));\nconst EditUser = lazy(() => import('./Pages/User/EditUser.jsx'));\nServer.init()\nconst FnF = ({ user }) => {\n    const TopicRoutes = (\n        <Route path='topic/*'>\n            <Route path=\"create\" element={<AddTopic />} />\n            <Route path=\"edit\" element={<EditTopic />} />\n            <Route path=\"*\" element={<ListTopic />} />\n        </Route>\n    )\n    const UserRoutes = (\n        <Route path='user/*'>\n            <Route path=\"edit\" element={<EditUser user={user} />} />\n            <Route path=\"*\" element={<ListUser user={user} />} />\n        </Route>\n    )\n    return (\n        <Routes>\n            {Server.hasAccess(user.rights, Server.RIGHTS.TOPIC) && TopicRoutes}\n            {Server.hasAccess(user.rights, Server.RIGHTS.GRANT) && UserRoutes}\n            <Route path=\"task/*\" >\n                <Route path=\"create\" element={<AddTask />} />\n                <Route path=\"*\" element={<ListTask />} />\n            </Route>\n            <Route path=\"setting\" element={<Setting />} />\n            <Route path=\"*\" element={<DashBoard user={user} />} />\n        </Routes>\n    )\n}\n\nexport default FnF","\ntype Country = string\ntype ID = number\ntype Article = {\n    id : ID;\n    title : string;\n    wikidata : string;\n    target : string\n}\ntype Category = {\n    id : ID;\n    title : string;\n    subcat?: boolean\n}\n\ntype APIResponseSingle<T> = {\n    success : true;\n    data : T;\n    detail? : string;\n}\ntype APIResponseMultiple<T> = {\n    success : true;\n    data : T[];\n    detail? : string;\n}\ntype User = {\n    id : number;\n    username : string;\n    rights : number;\n    created_at : string;\n    article_count : number;\n    category_count : number;\n    task_count : number;\n}\ntype TaskCreate = {\n    home_wiki : string;\n    target_wiki : string;\n    country : Country;\n    topic_id : string;\n    categories : Category[],\n    topic_data : Category[] \n}\ntype Task = {\n    id: number,\n    status: string,\n    homewiki: string,\n    categories: Array<string>,\n    user: string,\n    country: string,\n    article_count: number\n    category_count : number\n    category_done : number\n    last_category : string\n}\ntype TaskResultFormat = \"json\" | \"wikitext\" | \"csv\"\ntype TaskResult = string | Article[]\ntype CountryEntry = {\n    id : string;\n    label : string;\n    title : string;\n}\ntype TopicCreate = {\n    title : string;\n    country : Country;\n    categories : Category[];\n}\n\ntype Topic = {\n    id : string;\n    title : string;\n    country : Country;\n    categories? : Category[];\n}\nconst LANGUAGE_KEY = \"tk-lang\"\nconst COUNTRY_KEY = \"tk-country\"\ntype Permission = number;\nconst PERMISSIONS : {[key : string] : Permission} = {\n    TASK : 1 << 0,\n    STATS : 1 << 1,\n    CATEGORY : 1 << 2,\n    TOPIC : 1 << 3,\n    GRANT : 1 << 4,\n    REVOKE : 1 << 5,\n};\nclass FnF {\n    static baseURL = new URL(window.location.origin);\n    static languages : Object | null = null;\n    static countries : Object | null= null;\n    static RIGHTS = PERMISSIONS;\n    static async init(){\n        if(!FnF.languages || !FnF.countries){\n            if(!localStorage.getItem(LANGUAGE_KEY) || !localStorage.getItem(COUNTRY_KEY)){\n                localStorage.setItem(COUNTRY_KEY, JSON.stringify(await fetch(\"/api/country\").then(res => res.json()).then(res => res.data)))\n                localStorage.setItem(LANGUAGE_KEY, JSON.stringify(await fetch(\"/api/language\").then(res => res.json()).then(res => res.data)))\n            }\n            FnF.languages = JSON.parse(localStorage.getItem(LANGUAGE_KEY) || \"{}\");\n            FnF.countries = JSON.parse(localStorage.getItem(COUNTRY_KEY) || \"{}\");\n        }\n        \n    }\n    static hasAccess(rights : Permission, permission : Permission){\n        return (rights & permission) == permission;\n    }\n    static async addSubCategories(categories: Category[]) {\n        var subcats : Category[] = []\n        for (let cat of categories) {\n            console.info(\"Adding subcategories for\", cat.title)\n            const url = new URL(\"api/subcat/\" + cat.title, FnF.baseURL);\n            const response = await fetch(url.toString());\n            const data: APIResponseMultiple<Category> = await response.json();\n            subcats = subcats.concat(data.data);\n            cat.subcat = false;\n        }\n        return subcats;\n    }\n    static async getCategories({country, topic} : {country : Country, topic : string}){\n        const url = new URL(`api/topic/${topic.split(\"/\")[0]}/${country}/categories`, FnF.baseURL);\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<Category> = await response.json();\n        if (responseData.success) {\n            return responseData.data\n        } else {\n            console.log(\"Error\", responseData.data)\n            return [] as Category[];\n        }\n    }\n    static async submitTask(data : TaskCreate) {\n        // Submit the task\n        const url = new URL(\"api/task\", FnF.baseURL);\n        const response = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify(data),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        });\n        const responseData: APIResponseSingle<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n\n    }\n    static async fetchCountries(topic : string){\n        const url = new URL(\"api/topic/\" + topic + \"/country\", FnF.baseURL);\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<CountryEntry> = await response.json();\n        if (responseData.success) {\n            const rawData = responseData.data;\n            const countries = rawData.map((country) => {\n                return {\n                    id : country.id.split(\"/\")[1],\n                    label : country.title\n                }\n            })\n            return countries\n        } else {\n            console.log(\"Error\", responseData.data)\n            return [] as Country[];\n        }\n    }\n    static async exportResult(taskID : Number, format: TaskResultFormat = \"json\") {\n        const url = new URL(`api/task/${taskID}/export/` + format, FnF.baseURL);\n        const response = await fetch(url.toString());\n        const data : APIResponseSingle<TaskResult> = await response.json();\n        \n        return data.data;\n    }\n    static async getTask(taskID: number) {\n        const url = new URL(\"api/task/\" + taskID, FnF.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseSingle<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getTasks() {\n        const url = new URL(\"api/task\", FnF.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getMe(){\n        const url = new URL(\"api/user/me\", FnF.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseSingle<User> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getCountryMap(){\n        const url = new URL(\"api/country\", FnF.baseURL);\n        const countries = await fetch(url).then(res => res.json())\n        return countries.data\n    }\n    static searchCategory(callback : (data : Category[]) => void, setSearching : (searching : boolean) => void){\n        let q = \"\";\n        let queued = false;\n        const interval = 1000;\n        async function _search() {\n            if(q == \"\") return callback([]);\n            const url = new URL(\"https://en.wikipedia.org/w/api.php\");\n            const params = new URLSearchParams({\n                \"action\": \"query\",\n                \"format\": \"json\",\n                \"list\": \"prefixsearch\",\n                \"formatversion\": \"2\",\n                \"pssearch\": q,\n                \"pslimit\": \"10\",\n                \"psnamespace\": \"14\",\n                \"origin\": \"*\"\n            })\n            url.search = params.toString();\n            const response = await fetch(url.toString());\n            const data = await response.json();\n            const categories = data.query.prefixsearch.map((cat : any) => {\n                return {\n                    id : cat.pageid,\n                    title : cat.title\n                }\n            })\n            queued = false;\n            setSearching(false);\n            return callback(categories);\n        }\n        return function(e : KeyboardEvent){\n            setSearching(true)\n            q = (e?.target as HTMLInputElement)?.value;\n            if(queued == false){\n                // Nothing is queued\n                queued = true;\n                setTimeout(_search, interval)\n                console.log(\"Queued\")\n                \n            } else {\n                // Something is already queued\n                console.log(\"Already queued\")\n            }\n        }\n\n    }\n    static async createTopic(topic : TopicCreate){\n        const url = new URL(\"api/topic/\", FnF.baseURL);\n        const response : APIResponseSingle<Topic> = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify(topic),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(res => res.json());\n        console.log(response)\n        return response.data;\n    }\n    static async getTopic(topicID : string){\n        const url = new URL(\"api/topic/\" + topicID, FnF.baseURL);\n        const response : APIResponseSingle<Topic> = await fetch(url.toString()).then(res => res.json());\n        return response.data;\n    }\n    static async updateTopic({id, categories} : Topic){\n        const url = new URL(\"api/topic/\" + id, FnF.baseURL);\n        const response : APIResponseSingle<Topic> = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify({categories}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(res => res.json());\n        return response.data;\n    }\n    static async updateMe({username, rights} : User){\n        const url = new URL(\"api/user/me\", FnF.baseURL);\n        const response : APIResponseSingle<User> = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify({username, rights}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(res => res.json());\n        return response.data;\n    }\n    static async getUsers(){\n        const url = new URL(\"api/user/\", FnF.baseURL);\n        const response : APIResponseMultiple<User> = await fetch(url.toString()).then(res => res.json());\n        return response.data;\n    }\n    static toggleAccess(rights : number, permission : number){\n        return rights & permission ? rights & ~permission : rights | permission;\n    }\n    static async getUser(id : number){\n        const url = new URL(\"api/user/\" + id, FnF.baseURL);\n        const response : APIResponseSingle<User> = await fetch(url.toString()).then(res => res.json());\n        return response.data;\n    }\n    static async updateUser({id, username, rights} : User){\n        const url = new URL(\"api/user/\" + id, FnF.baseURL);\n        const response : APIResponseSingle<User> = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify({username, rights}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(res => res.json());\n        return response.data;\n    }\n    static async deleteTopic(id : string){\n        const url = new URL(\"api/topic/\" + id, FnF.baseURL);\n        const response : APIResponseSingle<Topic> = await fetch(url.toString(), {\n            method: \"DELETE\",\n        }).then(res => res.json());\n        return response.data;\n    }\n}\nexport default FnF;\n","import Paper from \"@mui/material/Paper\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport CodeIcon from '@mui/icons-material/Code';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Collapse from \"@mui/material/Collapse\"\nimport TranslateIcon from '@mui/icons-material/Translate';\nimport Server from \"../Server.ts\";\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport Typography from '@mui/material/Typography';\n\n\n\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\n\nconst Popup = ({ open, onClose, englishTitle, suggestedTargetTitle, languageCode, action }) => {\n    const [targetTitle, setTargetTitle] = React.useState(suggestedTargetTitle);\n    useEffect(() => {\n        setTargetTitle(suggestedTargetTitle)\n    }, [suggestedTargetTitle])\n    const data = {\n        title: '',\n        targetURL: '',\n        buttonName: ''\n    }\n    if (action == 'translate') {\n        data.title = 'Translate'\n        data.targetURL = `https://${languageCode}.wikipedia.org/w/index.php?title=Special:ContentTranslation&campaign=fnf&from=en&page=${englishTitle}&to=${languageCode}&targettitle=${targetTitle}`\n        data.buttonName = 'Translate'\n    } else {\n        data.title = 'Create'\n        data.targetURL = `https://${languageCode}.wikipedia.org/w/index.php?title=${targetTitle}&campaign=fnf&from=en&page=${englishTitle}&to=${targetTitle}&action=edit`\n        data.buttonName = 'Create'\n    }\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{data.title}</DialogTitle>\n            <DialogContent>\n                <Typography variant=\"body1\" gutterBottom >\n                    <b>English : <a href={\"https://en.wikipedia.org/wiki/\" + englishTitle} target=\"_blank\" style={{ textDecoration: 'none' }}>{englishTitle}</a></b>\n                </Typography>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Target Title\"\n                    multiline\n                    value={targetTitle}\n                    fullWidth\n                    onChange={e => setTargetTitle(e.target.value)}\n                    sx={{\n                        mt: 1\n                    }}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button sx={{ mr: 1 }} onClick={() => onClose(null)} color=\"secondary\" variant=\"contained\" size=\"small\">\n                    Cancel\n                </Button>\n                <Button color=\"primary\" variant=\"contained\" component=\"a\" size=\"small\" href={data.targetURL} target=\"_blank\" autoFocus>\n                    {data.buttonName}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\nconst COLUMNS = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1, hideable: false },\n    { field: 'action', headerName: 'Action', flex: 1, minWidth: 150, hideable: false, renderCell: (params) => params.value },\n    { field: 'title', headerName: 'Title', flex: 1, hideable: false, minWidth: 300 },\n    // { field: 'wikidata', headerName: 'Wikidata', width : 120},\n    { field: 'target', headerName: 'Target', flex: 1, minWidth: 300 },\n   \n]\nconst TabledArticles = ({ data, targetLanguage, taskID }) => {\n    const [popupAction, setPopupAction] = React.useState(null);\n    const [popupOpen, setPopupOpen] = React.useState(false);\n    const [popupEnglishTitle, setPopupEnglishTitle] = React.useState('');\n    const [popupSuggestedTargetTitle, setPopupSuggestedTargetTitle] = React.useState('');\n    const executeAction = (e) => {\n        setPopupAction(e.currentTarget.dataset.action)\n        setPopupEnglishTitle(e.currentTarget.dataset.src)\n        setPopupSuggestedTargetTitle(e.currentTarget.dataset.target)\n        setPopupOpen(true)\n    }\n    const rows = useMemo(() => data?.map((article, index) => ({\n        id: index + 1,\n        title: article?.title,\n        wikidata: article?.wikidata,\n        target: article?.target,\n        action: (\n            <>\n                <Button variant=\"contained\" color=\"primary\" size=\"small\" data-action=\"create\" data-src={article?.title} data-target={article?.target} onClick={executeAction}>\n                    <AddIcon />\n                </Button>\n                <Button variant=\"contained\" sx={{ml : 1}} color=\"primary\" size=\"small\" data-action=\"translate\" data-src={article?.title} data-target={article?.target} onClick={executeAction}>\n                    <TranslateIcon />\n                </Button>\n            </>\n        )\n    })), [data]);\n    return (\n        <>\n            <Popup\n                open={popupOpen}\n                action={popupAction}\n                onClose={() => setPopupOpen(false)}\n                suggestedTargetTitle={popupSuggestedTargetTitle}\n                englishTitle={popupEnglishTitle}\n                languageCode={targetLanguage}\n            />\n            <DataGrid\n                rows={rows}\n                columns={COLUMNS}\n                pageSize={50}\n                rowsPerPageOptions={[50]}\n                checkboxSelection={false}\n                disableSelectionOnClick\n                initialState={{\n                    pagination: {\n                        paginationModel: { pageSize: 25 },\n                    },\n                }}\n                sx={{\n                    width: '100%',\n                }}\n            />\n        </>\n    )\n}\n\nconst WikiTextArticles = ({ data }) => {\n    return (\n        <TextField\n            id=\"outlined-multiline-static\"\n            label={null}\n            multiline\n            rows={4}\n            value={data}\n            fullWidth\n            onClick={e => e.target.select()}\n        />\n    )\n}\nconst ArticleList = ({ taskID, statusRef, setDisabled, targetLanguage }) => {\n    const [data, setData] = React.useState([]);\n    const [wikitext, setWikiText] = React.useState('');\n    const [showWikiText, setShowWikiText] = React.useState(false);\n    const [csv, setCSV] = React.useState(null);\n    const [json, setJSON] = React.useState(null);\n    const [statusCheckerTimer, setStatusCheckerTimer] = React.useState(0);\n    const [articleCount, setArticleCount] = React.useState(0);\n    const [processedCategory, setProcessedCategory] = React.useState('');\n    const [processedCount, setProcessedCount] = React.useState(0);\n    const [generating, setGenerating] = React.useState(false);\n    statusRef.current = generating\n    const checkTaskStatus = useCallback(async () => {\n        // console.log(\"Checking status\")\n        const task = await Server.getTask(taskID)\n        if (task.status != 'pending') {\n            // console.log(\"Timer Cleared\", statusCheckerTimer)\n            setGenerating(false);\n            setDisabled(false);\n            setStatusCheckerTimer(0)\n            if (task.status == 'done') {\n                exportTable();\n            } else if (task.status == 'failed') {\n                alert(\"Task Failed\")\n            }\n        } else {\n            setGenerating(true);\n            setDisabled(true);\n            setStatusCheckerTimer(setTimeout(checkTaskStatus, 1000))\n            setData([]);\n        }\n        setArticleCount(task.article_count);\n        setProcessedCategory(task.last_category);\n        setProcessedCount(task.category_count);\n    }, [taskID]);\n    const exportCSV = useCallback(async () => {\n        const download = (taskID, csv) => {\n            const a = document.createElement(\"a\");\n            a.download = `results-${taskID}.csv`\n            a.href = URL.createObjectURL(new Blob([csv], {\n                type: 'application/csv'\n            }));\n            a.click();\n            a.remove()\n        }\n        if (!csv) {\n            // fetch CSV\n            const csv = await Server.exportResult(taskID, 'csv');\n            setCSV(csv)\n            return download(taskID, csv)\n        };\n        return download(taskID, csv)\n\n    }, [taskID,]);\n    const exportWikiTextToggle = useCallback(async () => {\n        if (showWikiText)\n            // hide the wikitext\n            setShowWikiText(false)\n        else {\n            if (!wikitext) {\n                // fetch the wikitext\n                const wikitext = await Server.exportResult(taskID, 'wikitext');\n                setShowWikiText(true)\n                setWikiText(wikitext)\n            }\n            else\n                setShowWikiText(true)\n        }\n    }, [taskID, showWikiText]);\n    const exportTable = useCallback(async () => {\n        console.log(\"Export table called\")\n        const cats = await Server.exportResult(taskID, 'json');\n        setData(cats);\n        setJSON(JSON.stringify(cats));\n    }, [taskID]);\n\n    React.useEffect(() => {\n        checkTaskStatus();\n        return () => {\n            clearTimeout(statusCheckerTimer);\n            setStatusCheckerTimer(0)\n        }\n    }, [taskID, checkTaskStatus]);\n    const Actions = (\n        <Box sx={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n            '& > *': {\n                m: 1,\n            },\n        }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportWikiTextToggle} disabled={generating} size=\"small\" sx={{mr : 1}}>\n                <CodeIcon /> Wiki\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportCSV} disabled={generating} size=\"small\" >\n                <DownloadIcon /> CSV\n            </Button>\n        </Box>\n    );\n    const GeneratorStatus = (\n        <Box sx={{\n            fontSize: '16px'\n        }}>\n            Article count : {articleCount}<br />\n            Processed Count : {processedCount}<br />\n            Last Category: {processedCategory}<br />\n        </Box>\n    )\n    return <Card sx={\n        { m: '5px' }\n    }>\n        <CardHeader action={Actions} title={GeneratorStatus} />\n        <CardContent>\n            {generating ? <CircularProgress /> : (\n                <>\n                    <Collapse in={showWikiText}>\n                        <WikiTextArticles data={wikitext} />\n                    </Collapse>\n                    {data && <TabledArticles data={data} targetLanguage={targetLanguage} taskID={taskID} />}\n                </>\n            )}\n        </CardContent>\n    </Card>\n}\nexport default ArticleList","import Paper from \"@mui/material/Paper\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport Server from \"../Server.ts\";\nconst Category = ({ category, onRemove, onSubCategory }) => {\n    return (\n        <ListItem>\n            <ListItemText sx={{\n                padding: '5px'\n            }} primary={category?.title} />\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onSubCategory(category?.id)}>\n                <WaterfallChartIcon />\n            </Button>\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onRemove(category?.id)}>\n                <DeleteIcon />\n            </Button>\n        </ListItem>\n    )\n}\nconst AddCategory = ({ onAdd, disabled }) => {\n    const [searching, setSearching] = React.useState(false);\n    const [categorySuggestions, setCategorySuggestions] = React.useState([]); // [{title: 'cat1'}, {title: 'cat2'}\n    const [newCat, setNewCat] = React.useState('');\n    const onInput = React.useCallback(Server.searchCategory(setCategorySuggestions, setSearching), []);\n    const _onAdd = React.useCallback((e) => {\n        const category = categorySuggestions.find(cat => cat.title === newCat);\n        if (!category)\n            return;\n        onAdd(category);\n        setNewCat('');\n    }, [categorySuggestions, newCat]);\n    return (\n        <Box sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            // justifyContent: 'center',\n            width: '100%',\n            height: '100%',\n\n        }}>\n            <AutoComplete\n                id=\"new-category\"\n                options={categorySuggestions}\n                disabled={disabled}\n                size=\"small\"\n                clearOnBlur\n                clearOnEscape\n                loading={searching}\n                getOptionLabel={(option) => option?.title || ''}\n                sx={{\n                    width: '100%',\n                    maxWidth: '400px',\n                    marginRight: '10px',\n                    marginLeft: '10px'\n                }}\n                renderInput={(params) => <TextField\n                    {...params} disabled={disabled}\n                    onInput={onInput}\n                    onSelect={e => setNewCat(e.target.value)}\n                    label=\"Add Additional Category\"\n                />}\n            />\n            <Button disabled={disabled} variant=\"contained\" color=\"success\" onClick={_onAdd} >\n                <AddIcon />\n            </Button>\n        </Box>\n    )\n}\nconst CategoryList = ({ categoryListRef, initialCategories, disabled = false }) => {\n    const [categoryObject, setCategoryObject] = React.useState({});// {categoryName: {categoryObject}\n    const categories = React.useMemo(() => {\n        return Object.values(categoryObject);\n    }, [categoryObject]);\n    const onRemove = React.useCallback((ccatID) => {\n        if (!ccatID)\n            return\n        if (!categoryObject[ccatID])\n            return\n        delete categoryObject[ccatID];\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onAdd = React.useCallback((category) => {\n        if (!category)\n            return\n        if (categoryObject[category.id])\n            return\n        categoryObject[category.id] = category;\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onSubCategory = React.useCallback((catID) => {\n        console.log('onSubCategory', catID)\n        const cat = categoryObject[catID];\n        if (!cat)\n            return\n        Server.addSubCategories([cat]).then(categories => {\n            categories.forEach(cat => {\n                categoryObject[cat.id] = cat;\n            });\n            setCategoryObject({ ...categoryObject });\n        });\n    }, [categoryObject]);\n    // Populate the categories\n    React.useEffect(() => {\n        if (categoryListRef)\n            categoryListRef.current = categories;\n    }, [categories, categoryListRef]);\n    React.useEffect(() => {\n        if (!initialCategories?.length)\n            return;\n        setCategoryObject(initialCategories?.reduce((dict, v) => { dict[v.id] = v; return dict }, {}))\n    }, [initialCategories]);\n    return (\n        <Paper elevation={0}>\n            <List dense={true}>\n                {categories?.map((category, index) => (\n                    <React.Fragment key={\"cat\" + index}>\n                        <Category category={category} onRemove={onRemove} onSubCategory={onSubCategory} />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List><br />\n            {/* // show button and the input in the same box */}\n            <AddCategory onAdd={onAdd} disabled={disabled} />\n        </Paper>\n    )\n}\nexport default CategoryList"],"names":["categoryListRef","React","_useState","useState","_useState2","_slicedToArray","countries","setCountries","_useState3","_useState4","setTaskID","_useState5","_useState6","disabled","setDisabled","_useState7","_useState8","topicName","_useState9","_useState10","country","setCountry","_useState11","_useState12","targetwiki","setTargetwiki","_useState13","_useState14","categoryExpanded","setCategoryExpanded","_useState15","_useState16","categoryFetching","setCategoryFetching","_useState17","_useState18","targetWikiError","setTargetWikiError","_useState19","_useState20","defaultCategories","setDefaultCategories","_useState21","_useState22","resultElement","setResultElement","statusRef","wiki","_i","_Object$entries","Object","entries","Server","languages","length","_Object$entries$_i","key","value","push","id","label","sort","a","b","localeCompare","useEffect","fetchCountries","then","_toConsumableArray","getCategories","topic","categories","finally","e","submitTask","useCallback","categoryList","current","target_wiki","topic_id","task_data","response","taskID","_jsx","ArticleList","targetLanguage","_jsxs","Card","children","CardHeader","title","action","Button","variant","color","onClick","size","ListIcon","CardContent","Box","sx","display","justifyContent","flexDirection","FormControl","width","InputLabel","Select","fullWidth","onChange","target","map","v","MenuItem","ml","error","padding","CollapseIcon","ExpandedIcon","Collapse","in","CircularProgress","CategoryList","initialCategories","Footer","User","username","setUsername","setID","taskCount","setTaskCount","articleCount","setArticleCount","fetching","setFetching","getMe","user","task_count","article_count","DownloadButon","_ref","download","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","csv","wrap","_context","prev","next","exportResult","sent","document","createElement","href","URL","createObjectURL","Blob","type","click","stop","apply","arguments","DownloadIcon","headers","field","headerName","maxWidth","flex","minWidth","renderCell","params","TaskList","tasks","setTasks","Intl","DateTimeFormat","dateStyle","timeStyle","getTasks","_objectSpread","status","DataGrid","rows","columns","initialState","pagination","paginationModel","pageSize","cursor","backgroundColor","GREEN","Yellow","RED","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","rowSelection","getRowClassName","concat","row","loading","NewTaskButton","Link","to","AddIcon","hideUsername","window","confirm","updateMe","fetch","method","body","JSON","stringify","res","location","Paper","height","m","border","outline","position","HideIcon","Description","sections","hasAccess","rights","RIGHTS","TASK","p","alignItems","component","TOPIC","STATS","SettingIcon","PeopleIcon","Typography","textAlign","mb","AddTopic","lazy","EditTopic","ListTopic","ListUser","EditUser","init","TopicRoutes","Route","path","element","UserRoutes","Routes","GRANT","AddTask","ListTask","Setting","DashBoard","LANGUAGE_KEY","COUNTRY_KEY","FnF","_classCallCheck","_createClass","_init","localStorage","getItem","t0","t1","t2","json","data","t3","t4","call","setItem","t5","t6","t7","t8","t9","parse","permission","_addSubCategories","_callee2","subcats","_iterator","_step","cat","url","_data","_context2","_createForOfIteratorHelper","s","n","done","console","info","baseURL","toString","subcat","f","finish","abrupt","_x","_getCategories","_callee3","responseData","_context3","split","success","log","_x2","_submitTask","_callee4","_context4","_x3","_fetchCountries","_callee5","rawData","_context5","_x4","_exportResult","_callee6","format","_args6","_context6","undefined","_x5","_getTask","_callee7","_context7","_x6","_getTasks","_callee8","_context8","_getMe","_callee9","_context9","_getCountryMap","_callee10","_context10","callback","setSearching","q","queued","_search","_search2","_callee11","_context11","URLSearchParams","search","query","prefixsearch","pageid","_e$target","setTimeout","_createTopic","_callee12","_context12","_x7","_getTopic","_callee13","topicID","_context13","_x8","_updateTopic","_callee14","_context14","_x9","_updateMe","_callee15","_ref3","_context15","_x10","_getUsers","_callee16","_context16","_getUser","_callee17","_context17","_x11","_updateUser","_callee18","_ref4","_context18","_x12","_deleteTopic","_callee19","_context19","_x13","origin","CATEGORY","REVOKE","Popup","open","onClose","englishTitle","suggestedTargetTitle","languageCode","_React$useState","_React$useState2","targetTitle","setTargetTitle","targetURL","buttonName","Dialog","DialogTitle","DialogContent","gutterBottom","style","textDecoration","TextField","multiline","mt","DialogActions","mr","autoFocus","COLUMNS","hideable","TabledArticles","_React$useState3","_React$useState4","popupAction","setPopupAction","_React$useState5","_React$useState6","popupOpen","setPopupOpen","_React$useState7","_React$useState8","popupEnglishTitle","setPopupEnglishTitle","_React$useState9","_React$useState10","popupSuggestedTargetTitle","setPopupSuggestedTargetTitle","executeAction","currentTarget","dataset","src","useMemo","article","index","wikidata","_Fragment","TranslateIcon","WikiTextArticles","select","_React$useState11","_React$useState12","setData","_React$useState13","_React$useState14","wikitext","setWikiText","_React$useState15","_React$useState16","showWikiText","setShowWikiText","_React$useState17","_React$useState18","setCSV","_React$useState19","_React$useState20","setJSON","_React$useState21","_React$useState22","statusCheckerTimer","setStatusCheckerTimer","_React$useState23","_React$useState24","_React$useState25","_React$useState26","processedCategory","setProcessedCategory","_React$useState27","_React$useState28","processedCount","setProcessedCount","_React$useState29","_React$useState30","generating","setGenerating","checkTaskStatus","task","getTask","exportTable","alert","last_category","category_count","exportCSV","_csv","remove","exportWikiTextToggle","_wikitext","cats","clearTimeout","Actions","CodeIcon","GeneratorStatus","fontSize","Category","category","onRemove","onSubCategory","ListItem","ListItemText","primary","WaterfallChartIcon","DeleteIcon","AddCategory","onAdd","searching","categorySuggestions","setCategorySuggestions","newCat","setNewCat","onInput","searchCategory","_onAdd","find","AutoComplete","options","clearOnBlur","clearOnEscape","getOptionLabel","option","marginRight","marginLeft","renderInput","onSelect","_ref3$disabled","categoryObject","setCategoryObject","values","ccatID","catID","addSubCategories","forEach","reduce","dict","elevation","List","dense","Divider"],"sourceRoot":""}